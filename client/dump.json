Metadata:
 [
 1635018093,
 {
  "V8": {
   "modules": [
    {
     "name": "System",
     "storage": {
      "prefix": "System",
      "entries": [
       {
        "name": "AccountNonce",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "T::AccountId",
          "value": "T::Index",
          "is_linked": false
         }
        },
        "default": [
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " Extrinsics nonce for accounts."
        ]
       },
       {
        "name": "ExtrinsicCount",
        "modifier": "Optional",
        "ty": {
         "Plain": "u32"
        },
        "default": [
         0
        ],
        "documentation": [
         " Total extrinsics count for the current block."
        ]
       },
       {
        "name": "AllExtrinsicsWeight",
        "modifier": "Optional",
        "ty": {
         "Plain": "Weight"
        },
        "default": [
         0
        ],
        "documentation": [
         " Total weight for all extrinsics put together, for the current block."
        ]
       },
       {
        "name": "AllExtrinsicsLen",
        "modifier": "Optional",
        "ty": {
         "Plain": "u32"
        },
        "default": [
         0
        ],
        "documentation": [
         " Total length (in bytes) for all extrinsics put together, for the current block."
        ]
       },
       {
        "name": "BlockHash",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "T::BlockNumber",
          "value": "T::Hash",
          "is_linked": false
         }
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " Map of block numbers to block hashes."
        ]
       },
       {
        "name": "ExtrinsicData",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "u32",
          "value": "Vec<u8>",
          "is_linked": false
         }
        },
        "default": [
         0
        ],
        "documentation": [
         " Extrinsics data for the current block (maps an extrinsic's index to its data)."
        ]
       },
       {
        "name": "Number",
        "modifier": "Default",
        "ty": {
         "Plain": "T::BlockNumber"
        },
        "default": [
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " The current block number being processed. Set by `execute_block`."
        ]
       },
       {
        "name": "ParentHash",
        "modifier": "Default",
        "ty": {
         "Plain": "T::Hash"
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " Hash of the previous block."
        ]
       },
       {
        "name": "ExtrinsicsRoot",
        "modifier": "Default",
        "ty": {
         "Plain": "T::Hash"
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " Extrinsics root of the current block, also part of the block header."
        ]
       },
       {
        "name": "Digest",
        "modifier": "Default",
        "ty": {
         "Plain": "DigestOf<T>"
        },
        "default": [
         0
        ],
        "documentation": [
         " Digest of the current block, also part of the block header."
        ]
       },
       {
        "name": "Events",
        "modifier": "Default",
        "ty": {
         "Plain": "Vec<EventRecord<T::Event, T::Hash>>"
        },
        "default": [
         0
        ],
        "documentation": [
         " Events deposited for the current block."
        ]
       },
       {
        "name": "EventCount",
        "modifier": "Default",
        "ty": {
         "Plain": "EventIndex"
        },
        "default": [
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " The number of events in the `Events<T>` list."
        ]
       },
       {
        "name": "EventTopics",
        "modifier": "Default",
        "ty": {
         "DoubleMap": {
          "hasher": "Blake2_256",
          "key1": "()",
          "key2": "T::Hash",
          "value": "Vec<(T::BlockNumber, EventIndex)>",
          "key2_hasher": "Blake2_256"
         }
        },
        "default": [
         0
        ],
        "documentation": [
         " Mapping between a topic (represented by T::Hash) and a vector of indexes",
         " of events in the `<Events<T>>` list.",
         "",
         " The first key serves no purpose. This field is declared as double_map just",
         " for convenience of using `remove_prefix`.",
         "",
         " All topic vectors have deterministic storage locations depending on the topic. This",
         " allows light-clients to leverage the changes trie storage tracking mechanism and",
         " in case of changes fetch the list of events of interest.",
         "",
         " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
         " the `EventIndex` then in case if the topic has the same contents on the next block",
         " no notification will be triggered thus the event might be lost."
        ]
       }
      ]
     },
     "calls": [
      {
       "name": "fill_block",
       "arguments": [],
       "documentation": [
        " A big dispatch that will disallow any other transaction to be included."
       ]
      },
      {
       "name": "remark",
       "arguments": [
        {
         "name": "_remark",
         "ty": "Vec<u8>"
        }
       ],
       "documentation": [
        " Make some on-chain remark."
       ]
      },
      {
       "name": "set_heap_pages",
       "arguments": [
        {
         "name": "pages",
         "ty": "u64"
        }
       ],
       "documentation": [
        " Set the number of pages in the WebAssembly environment's heap."
       ]
      },
      {
       "name": "set_code",
       "arguments": [
        {
         "name": "new",
         "ty": "Vec<u8>"
        }
       ],
       "documentation": [
        " Set the new code."
       ]
      },
      {
       "name": "set_storage",
       "arguments": [
        {
         "name": "items",
         "ty": "Vec<KeyValue>"
        }
       ],
       "documentation": [
        " Set some items of storage."
       ]
      },
      {
       "name": "kill_storage",
       "arguments": [
        {
         "name": "keys",
         "ty": "Vec<Key>"
        }
       ],
       "documentation": [
        " Kill some items from storage."
       ]
      },
      {
       "name": "kill_prefix",
       "arguments": [
        {
         "name": "prefix",
         "ty": "Key"
        }
       ],
       "documentation": [
        " Kill all storage items with a key that starts with the given prefix."
       ]
      }
     ],
     "event": [
      {
       "name": "ExtrinsicSuccess",
       "arguments": [],
       "documentation": [
        " An extrinsic completed successfully."
       ]
      },
      {
       "name": "ExtrinsicFailed",
       "arguments": [
        "DispatchError"
       ],
       "documentation": [
        " An extrinsic failed."
       ]
      }
     ],
     "constants": [],
     "errors": [
      {
       "name": "BadSignature",
       "documentation": []
      },
      {
       "name": "BlockFull",
       "documentation": []
      },
      {
       "name": "RequireSignedOrigin",
       "documentation": []
      },
      {
       "name": "RequireRootOrigin",
       "documentation": []
      },
      {
       "name": "RequireNoOrigin",
       "documentation": []
      }
     ]
    },
    {
     "name": "Timestamp",
     "storage": {
      "prefix": "Timestamp",
      "entries": [
       {
        "name": "Now",
        "modifier": "Default",
        "ty": {
         "Plain": "T::Moment"
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " Current time for the current block."
        ]
       },
       {
        "name": "DidUpdate",
        "modifier": "Default",
        "ty": {
         "Plain": "bool"
        },
        "default": [
         0
        ],
        "documentation": [
         " Did the timestamp get updated in this block?"
        ]
       }
      ]
     },
     "calls": [
      {
       "name": "set",
       "arguments": [
        {
         "name": "now",
         "ty": "Compact<T::Moment>"
        }
       ],
       "documentation": [
        " Set the current time.",
        "",
        " This call should be invoked exactly once per block. It will panic at the finalization",
        " phase, if this call hasn't been invoked by that time.",
        "",
        " The timestamp should be greater than the previous one by the amount specified by",
        " `MinimumPeriod`.",
        "",
        " The dispatch origin for this call must be `Inherent`."
       ]
      }
     ],
     "event": null,
     "constants": [
      {
       "name": "MinimumPeriod",
       "ty": "T::Moment",
       "value": [
        184,
        11,
        0,
        0,
        0,
        0,
        0,
        0
       ],
       "documentation": [
        " The minimum period between blocks. Beware that this is different to the *expected* period",
        " that the block production apparatus provides. Your chosen consensus system will generally",
        " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
        " period on default settings."
       ]
      }
     ],
     "errors": []
    },
    {
     "name": "Aura",
     "storage": null,
     "calls": null,
     "event": null,
     "constants": [],
     "errors": []
    },
    {
     "name": "Grandpa",
     "storage": {
      "prefix": "GrandpaFinality",
      "entries": [
       {
        "name": "Authorities",
        "modifier": "Default",
        "ty": {
         "Plain": "AuthorityList"
        },
        "default": [
         0
        ],
        "documentation": [
         " DEPRECATED",
         "",
         " This used to store the current authority set, which has been migrated to the well-known",
         " GRANDPA_AUTHORITES_KEY unhashed key."
        ]
       },
       {
        "name": "State",
        "modifier": "Default",
        "ty": {
         "Plain": "StoredState<T::BlockNumber>"
        },
        "default": [
         0
        ],
        "documentation": [
         " State of the current authority set."
        ]
       },
       {
        "name": "PendingChange",
        "modifier": "Optional",
        "ty": {
         "Plain": "StoredPendingChange<T::BlockNumber>"
        },
        "default": [
         0
        ],
        "documentation": [
         " Pending change: (signaled at, scheduled change)."
        ]
       },
       {
        "name": "NextForced",
        "modifier": "Optional",
        "ty": {
         "Plain": "T::BlockNumber"
        },
        "default": [
         0
        ],
        "documentation": [
         " next block number where we can force a change."
        ]
       },
       {
        "name": "Stalled",
        "modifier": "Optional",
        "ty": {
         "Plain": "(T::BlockNumber, T::BlockNumber)"
        },
        "default": [
         0
        ],
        "documentation": [
         " `true` if we are currently stalled."
        ]
       },
       {
        "name": "CurrentSetId",
        "modifier": "Default",
        "ty": {
         "Plain": "SetId"
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " The number of changes (both in terms of keys and underlying economic responsibilities)",
         " in the \"set\" of Grandpa validators from genesis."
        ]
       },
       {
        "name": "SetIdSession",
        "modifier": "Optional",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "SetId",
          "value": "SessionIndex",
          "is_linked": false
         }
        },
        "default": [
         0
        ],
        "documentation": [
         " A mapping from grandpa set ID to the index of the *most recent* session for which its members were responsible."
        ]
       }
      ]
     },
     "calls": [
      {
       "name": "report_misbehavior",
       "arguments": [
        {
         "name": "_report",
         "ty": "Vec<u8>"
        }
       ],
       "documentation": [
        " Report some misbehavior."
       ]
      }
     ],
     "event": [
      {
       "name": "NewAuthorities",
       "arguments": [
        "AuthorityList"
       ],
       "documentation": [
        " New authority set has been applied."
       ]
      },
      {
       "name": "Paused",
       "arguments": [],
       "documentation": [
        " Current authority set has been paused."
       ]
      },
      {
       "name": "Resumed",
       "arguments": [],
       "documentation": [
        " Current authority set has been resumed."
       ]
      }
     ],
     "constants": [],
     "errors": []
    },
    {
     "name": "Indices",
     "storage": {
      "prefix": "Indices",
      "entries": [
       {
        "name": "NextEnumSet",
        "modifier": "Default",
        "ty": {
         "Plain": "T::AccountIndex"
        },
        "default": [
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " The next free enumeration set."
        ]
       },
       {
        "name": "EnumSet",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "T::AccountIndex",
          "value": "Vec<T::AccountId>",
          "is_linked": false
         }
        },
        "default": [
         0
        ],
        "documentation": [
         " The enumeration sets."
        ]
       }
      ]
     },
     "calls": [],
     "event": [
      {
       "name": "NewAccountIndex",
       "arguments": [
        "AccountId",
        "AccountIndex"
       ],
       "documentation": [
        " A new account index was assigned.",
        "",
        " This event is not triggered when an existing index is reassigned",
        " to another `AccountId`."
       ]
      }
     ],
     "constants": [],
     "errors": []
    },
    {
     "name": "Balances",
     "storage": {
      "prefix": "Balances",
      "entries": [
       {
        "name": "TotalIssuance",
        "modifier": "Default",
        "ty": {
         "Plain": "T::Balance"
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " The total units issued in the system."
        ]
       },
       {
        "name": "Vesting",
        "modifier": "Optional",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "T::AccountId",
          "value": "VestingSchedule<T::Balance, T::BlockNumber>",
          "is_linked": false
         }
        },
        "default": [
         0
        ],
        "documentation": [
         " Information regarding the vesting of a given account."
        ]
       },
       {
        "name": "FreeBalance",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "T::AccountId",
          "value": "T::Balance",
          "is_linked": false
         }
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " The 'free' balance of a given account.",
         "",
         " This is the only balance that matters in terms of most operations on tokens. It",
         " alone is used to determine the balance when in the contract execution environment. When this",
         " balance falls below the value of `ExistentialDeposit`, then the 'current account' is",
         " deleted: specifically `FreeBalance`. Further, the `OnFreeBalanceZero` callback",
         " is invoked, giving a chance to external modules to clean up data associated with",
         " the deleted account.",
         "",
         " `system::AccountNonce` is also deleted if `ReservedBalance` is also zero (it also gets",
         " collapsed to zero if it ever becomes less than `ExistentialDeposit`."
        ]
       },
       {
        "name": "ReservedBalance",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "T::AccountId",
          "value": "T::Balance",
          "is_linked": false
         }
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " The amount of the balance of a given account that is externally reserved; this can still get",
         " slashed, but gets slashed last of all.",
         "",
         " This balance is a 'reserve' balance that other subsystems use in order to set aside tokens",
         " that are still 'owned' by the account holder, but which are suspendable.",
         "",
         " When this balance falls below the value of `ExistentialDeposit`, then this 'reserve account'",
         " is deleted: specifically, `ReservedBalance`.",
         "",
         " `system::AccountNonce` is also deleted if `FreeBalance` is also zero (it also gets",
         " collapsed to zero if it ever becomes less than `ExistentialDeposit`.)"
        ]
       },
       {
        "name": "Locks",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "T::AccountId",
          "value": "Vec<BalanceLock<T::Balance, T::BlockNumber>>",
          "is_linked": false
         }
        },
        "default": [
         0
        ],
        "documentation": [
         " Any liquidity locks on some account balances."
        ]
       }
      ]
     },
     "calls": [
      {
       "name": "transfer",
       "arguments": [
        {
         "name": "dest",
         "ty": "<T::Lookup as StaticLookup>::Source"
        },
        {
         "name": "value",
         "ty": "Compact<T::Balance>"
        }
       ],
       "documentation": [
        " Transfer some liquid free balance to another account.",
        "",
        " `transfer` will set the `FreeBalance` of the sender and receiver.",
        " It will decrease the total issuance of the system by the `TransferFee`.",
        " If the sender's account is below the existential deposit as a result",
        " of the transfer, the account will be reaped.",
        "",
        " The dispatch origin for this call must be `Signed` by the transactor.",
        "",
        " # <weight>",
        " - Dependent on arguments but not critical, given proper implementations for",
        "   input config types. See related functions below.",
        " - It contains a limited number of reads and writes internally and no complex computation.",
        "",
        " Related functions:",
        "",
        "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
        "   - Transferring balances to accounts that did not exist before will cause",
        "      `T::OnNewAccount::on_new_account` to be called.",
        "   - Removing enough funds from an account will trigger",
        "     `T::DustRemoval::on_unbalanced` and `T::OnFreeBalanceZero::on_free_balance_zero`.",
        "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
        "     check that the transfer will not kill the origin account.",
        "",
        " # </weight>"
       ]
      },
      {
       "name": "set_balance",
       "arguments": [
        {
         "name": "who",
         "ty": "<T::Lookup as StaticLookup>::Source"
        },
        {
         "name": "new_free",
         "ty": "Compact<T::Balance>"
        },
        {
         "name": "new_reserved",
         "ty": "Compact<T::Balance>"
        }
       ],
       "documentation": [
        " Set the balances of a given account.",
        "",
        " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
        " also decrease the total issuance of the system (`TotalIssuance`).",
        " If the new free or reserved balance is below the existential deposit,",
        " it will reset the account nonce (`system::AccountNonce`).",
        "",
        " The dispatch origin for this call is `root`.",
        "",
        " # <weight>",
        " - Independent of the arguments.",
        " - Contains a limited number of reads and writes.",
        " # </weight>"
       ]
      },
      {
       "name": "force_transfer",
       "arguments": [
        {
         "name": "source",
         "ty": "<T::Lookup as StaticLookup>::Source"
        },
        {
         "name": "dest",
         "ty": "<T::Lookup as StaticLookup>::Source"
        },
        {
         "name": "value",
         "ty": "Compact<T::Balance>"
        }
       ],
       "documentation": [
        " Exactly as `transfer`, except the origin must be root and the source account may be",
        " specified."
       ]
      },
      {
       "name": "transfer_keep_alive",
       "arguments": [
        {
         "name": "dest",
         "ty": "<T::Lookup as StaticLookup>::Source"
        },
        {
         "name": "value",
         "ty": "Compact<T::Balance>"
        }
       ],
       "documentation": [
        " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
        " origin account.",
        "",
        " 99% of the time you want [`transfer`] instead.",
        "",
        " [`transfer`]: struct.Module.html#method.transfer"
       ]
      }
     ],
     "event": [
      {
       "name": "NewAccount",
       "arguments": [
        "AccountId",
        "Balance"
       ],
       "documentation": [
        " A new account was created."
       ]
      },
      {
       "name": "ReapedAccount",
       "arguments": [
        "AccountId"
       ],
       "documentation": [
        " An account was reaped."
       ]
      },
      {
       "name": "Transfer",
       "arguments": [
        "AccountId",
        "AccountId",
        "Balance",
        "Balance"
       ],
       "documentation": [
        " Transfer succeeded (from, to, value, fees)."
       ]
      }
     ],
     "constants": [
      {
       "name": "ExistentialDeposit",
       "ty": "T::Balance",
       "value": [
        244,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
       ],
       "documentation": [
        " The minimum amount required to keep an account open."
       ]
      },
      {
       "name": "TransferFee",
       "ty": "T::Balance",
       "value": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
       ],
       "documentation": [
        " The fee required to make a transfer."
       ]
      },
      {
       "name": "CreationFee",
       "ty": "T::Balance",
       "value": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
       ],
       "documentation": [
        " The fee required to create an account."
       ]
      }
     ],
     "errors": []
    },
    {
     "name": "TransactionPayment",
     "storage": {
      "prefix": "Balances",
      "entries": [
       {
        "name": "NextFeeMultiplier",
        "modifier": "Default",
        "ty": {
         "Plain": "Multiplier"
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       }
      ]
     },
     "calls": null,
     "event": null,
     "constants": [
      {
       "name": "TransactionBaseFee",
       "ty": "BalanceOf<T>",
       "value": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
       ],
       "documentation": [
        " The fee to be paid for making a transaction; the base."
       ]
      },
      {
       "name": "TransactionByteFee",
       "ty": "BalanceOf<T>",
       "value": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
       ],
       "documentation": [
        " The fee to be paid for making a transaction; the per-byte portion."
       ]
      }
     ],
     "errors": []
    },
    {
     "name": "Sudo",
     "storage": {
      "prefix": "Sudo",
      "entries": [
       {
        "name": "Key",
        "modifier": "Default",
        "ty": {
         "Plain": "T::AccountId"
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": [
         " The `AccountId` of the sudo key."
        ]
       }
      ]
     },
     "calls": [
      {
       "name": "sudo",
       "arguments": [
        {
         "name": "proposal",
         "ty": "Box<T::Proposal>"
        }
       ],
       "documentation": [
        " Authenticates the sudo key and dispatches a function call with `Root` origin.",
        "",
        " The dispatch origin for this call must be _Signed_.",
        "",
        " # <weight>",
        " - O(1).",
        " - Limited storage reads.",
        " - One DB write (event).",
        " - Unknown weight of derivative `proposal` execution.",
        " # </weight>"
       ]
      },
      {
       "name": "set_key",
       "arguments": [
        {
         "name": "new",
         "ty": "<T::Lookup as StaticLookup>::Source"
        }
       ],
       "documentation": [
        " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
        "",
        " The dispatch origin for this call must be _Signed_.",
        "",
        " # <weight>",
        " - O(1).",
        " - Limited storage reads.",
        " - One DB change.",
        " # </weight>"
       ]
      },
      {
       "name": "sudo_as",
       "arguments": [
        {
         "name": "who",
         "ty": "<T::Lookup as StaticLookup>::Source"
        },
        {
         "name": "proposal",
         "ty": "Box<T::Proposal>"
        }
       ],
       "documentation": [
        " Authenticates the sudo key and dispatches a function call with `Signed` origin from",
        " a given account.",
        "",
        " The dispatch origin for this call must be _Signed_.",
        "",
        " # <weight>",
        " - O(1).",
        " - Limited storage reads.",
        " - One DB write (event).",
        " - Unknown weight of derivative `proposal` execution.",
        " # </weight>"
       ]
      }
     ],
     "event": [
      {
       "name": "Sudid",
       "arguments": [
        "bool"
       ],
       "documentation": [
        " A sudo just took place."
       ]
      },
      {
       "name": "KeyChanged",
       "arguments": [
        "AccountId"
       ],
       "documentation": [
        " The sudoer just switched identity; the old key is supplied."
       ]
      },
      {
       "name": "SudoAsDone",
       "arguments": [
        "bool"
       ],
       "documentation": [
        " A sudo just took place."
       ]
      }
     ],
     "constants": [],
     "errors": []
    },
    {
     "name": "EncointerCeremonies",
     "storage": {
      "prefix": "EncointerCeremonies",
      "entries": [
       {
        "name": "ParticipantRegistry",
        "modifier": "Default",
        "ty": {
         "DoubleMap": {
          "hasher": "Blake2_256",
          "key1": "CurrencyCeremony",
          "key2": "ParticipantIndexType",
          "value": "T::AccountId",
          "key2_hasher": "Blake2_256"
         }
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "ParticipantIndex",
        "modifier": "Default",
        "ty": {
         "DoubleMap": {
          "hasher": "Blake2_256",
          "key1": "CurrencyCeremony",
          "key2": "T::AccountId",
          "value": "ParticipantIndexType",
          "key2_hasher": "Blake2_256"
         }
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "ParticipantCount",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "CurrencyCeremony",
          "value": "ParticipantIndexType",
          "is_linked": false
         }
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "ParticipantReputation",
        "modifier": "Default",
        "ty": {
         "DoubleMap": {
          "hasher": "Blake2_256",
          "key1": "CurrencyCeremony",
          "key2": "T::AccountId",
          "value": "Reputation",
          "key2_hasher": "Blake2_256"
         }
        },
        "default": [
         0
        ],
        "documentation": []
       },
       {
        "name": "MeetupRegistry",
        "modifier": "Default",
        "ty": {
         "DoubleMap": {
          "hasher": "Blake2_256",
          "key1": "CurrencyCeremony",
          "key2": "MeetupIndexType",
          "value": "Vec<T::AccountId>",
          "key2_hasher": "Blake2_256"
         }
        },
        "default": [
         0
        ],
        "documentation": []
       },
       {
        "name": "MeetupIndex",
        "modifier": "Default",
        "ty": {
         "DoubleMap": {
          "hasher": "Blake2_256",
          "key1": "CurrencyCeremony",
          "key2": "T::AccountId",
          "value": "MeetupIndexType",
          "key2_hasher": "Blake2_256"
         }
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "MeetupCount",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "CurrencyCeremony",
          "value": "MeetupIndexType",
          "is_linked": false
         }
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "AttestationRegistry",
        "modifier": "Default",
        "ty": {
         "DoubleMap": {
          "hasher": "Blake2_256",
          "key1": "CurrencyCeremony",
          "key2": "AttestationIndexType",
          "value": "Vec<T::AccountId>",
          "key2_hasher": "Blake2_256"
         }
        },
        "default": [
         0
        ],
        "documentation": []
       },
       {
        "name": "AttestationIndex",
        "modifier": "Default",
        "ty": {
         "DoubleMap": {
          "hasher": "Blake2_256",
          "key1": "CurrencyCeremony",
          "key2": "T::AccountId",
          "value": "AttestationIndexType",
          "key2_hasher": "Blake2_256"
         }
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "AttestationCount",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "CurrencyCeremony",
          "value": "AttestationIndexType",
          "is_linked": false
         }
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "MeetupParticipantCountVote",
        "modifier": "Default",
        "ty": {
         "DoubleMap": {
          "hasher": "Blake2_256",
          "key1": "CurrencyCeremony",
          "key2": "T::AccountId",
          "value": "u32",
          "key2_hasher": "Blake2_256"
         }
        },
        "default": [
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "CurrentCeremonyIndex",
        "modifier": "Default",
        "ty": {
         "Plain": "CeremonyIndexType"
        },
        "default": [
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "LastCeremonyBlock",
        "modifier": "Default",
        "ty": {
         "Plain": "T::BlockNumber"
        },
        "default": [
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "CurrentPhase",
        "modifier": "Default",
        "ty": {
         "Plain": "CeremonyPhaseType"
        },
        "default": [
         0
        ],
        "documentation": []
       },
       {
        "name": "CeremonyReward",
        "modifier": "Default",
        "ty": {
         "Plain": "T::Balance"
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       },
       {
        "name": "CeremonyMaster",
        "modifier": "Default",
        "ty": {
         "Plain": "T::AccountId"
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       }
      ]
     },
     "calls": [
      {
       "name": "next_phase",
       "arguments": [],
       "documentation": []
      },
      {
       "name": "register_participant",
       "arguments": [
        {
         "name": "cid",
         "ty": "CurrencyIdentifier"
        },
        {
         "name": "proof",
         "ty": "Option<ProofOfAttendance<T::Signature, T::AccountId>>"
        }
       ],
       "documentation": []
      },
      {
       "name": "register_attestations",
       "arguments": [
        {
         "name": "attestations",
         "ty": "Vec<Attestation<T::Signature, T::AccountId>>"
        }
       ],
       "documentation": []
      }
     ],
     "event": [
      {
       "name": "PhaseChangedTo",
       "arguments": [
        "CeremonyPhaseType"
       ],
       "documentation": []
      },
      {
       "name": "ParticipantRegistered",
       "arguments": [
        "AccountId"
       ],
       "documentation": []
      }
     ],
     "constants": [],
     "errors": []
    },
    {
     "name": "EncointerCurrencies",
     "storage": {
      "prefix": "EncointerCeremonies",
      "entries": [
       {
        "name": "Locations",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "CurrencyIdentifier",
          "value": "Vec<Location>",
          "is_linked": false
         }
        },
        "default": [
         0
        ],
        "documentation": []
       },
       {
        "name": "Bootstrappers",
        "modifier": "Default",
        "ty": {
         "Map": {
          "hasher": "Blake2_256",
          "key": "CurrencyIdentifier",
          "value": "Vec<T::AccountId>",
          "is_linked": false
         }
        },
        "default": [
         0
        ],
        "documentation": []
       },
       {
        "name": "CurrencyIdentifiers",
        "modifier": "Default",
        "ty": {
         "Plain": "Vec<CurrencyIdentifier>"
        },
        "default": [
         0
        ],
        "documentation": []
       },
       {
        "name": "CurrencyMaster",
        "modifier": "Default",
        "ty": {
         "Plain": "T::AccountId"
        },
        "default": [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
        ],
        "documentation": []
       }
      ]
     },
     "calls": [
      {
       "name": "new_community",
       "arguments": [
        {
         "name": "loc",
         "ty": "Vec<Location>"
        },
        {
         "name": "bootstrappers",
         "ty": "Vec<T::AccountId>"
        }
       ],
       "documentation": []
      }
     ],
     "event": [
      {
       "name": "CurrencyRegistered",
       "arguments": [
        "AccountId",
        "CurrencyIdentifier"
       ],
       "documentation": []
      }
     ],
     "constants": [],
     "errors": []
    },
    {
     "name": "RandomnessCollectiveFlip",
     "storage": {
      "prefix": "RandomnessCollectiveFlip",
      "entries": [
       {
        "name": "RandomMaterial",
        "modifier": "Default",
        "ty": {
         "Plain": "Vec<T::Hash>"
        },
        "default": [
         0
        ],
        "documentation": [
         " Series of block headers from the last 81 blocks that acts as random seed material. This",
         " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
         " the oldest hash."
        ]
       }
      ]
     },
     "calls": [],
     "event": null,
     "constants": [],
     "errors": []
    }
   ]
  }
 }
]
