
//! Autogenerated weights for `pallet_encointer_faucet`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Fabian-iPhone.localdomain`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/encointer-node-notee
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_encointer_faucet
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=runtime/src/weights/pallet_encointer_faucet.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_encointer_faucet`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_encointer_faucet::WeightInfo for WeightInfo<T> {
	// Storage: EncointerCommunities CommunityIdentifiers (r:1 w:0)
	// Storage: EncointerFaucet Faucets (r:1 w:1)
	// Storage: EncointerFaucet ReserveAmount (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: EncointerReputationCommitments CurrentPurposeId (r:1 w:1)
	// Storage: EncointerReputationCommitments Purposes (r:0 w:1)
	fn create_faucet() -> Weight {
		// Minimum execution time: 148_000 nanoseconds.
		Weight::from_ref_time(149_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: EncointerFaucet Faucets (r:1 w:0)
	// Storage: EncointerReputationCommitments Purposes (r:1 w:0)
	// Storage: EncointerCeremonies ParticipantReputation (r:1 w:0)
	// Storage: EncointerReputationCommitments Commitments (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn drip() -> Weight {
		// Minimum execution time: 162_000 nanoseconds.
		Weight::from_ref_time(172_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: EncointerFaucet Faucets (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn dissolve_faucet() -> Weight {
		// Minimum execution time: 133_000 nanoseconds.
		Weight::from_ref_time(135_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: EncointerFaucet Faucets (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Reserves (r:1 w:0)
	fn close_faucet() -> Weight {
		// Minimum execution time: 137_000 nanoseconds.
		Weight::from_ref_time(139_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: EncointerFaucet ReserveAmount (r:0 w:1)
	fn set_reserve_amount() -> Weight {
		// Minimum execution time: 43_000 nanoseconds.
		Weight::from_ref_time(44_000_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
