/*
Copyright 2022 Encointer

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

//! Autogenerated weights for pallet_encointer_ceremonies with reference hardware:
//! * 2.3 GHz 8-Core Intel Core i9
//! * 16 GB 2400 MHz DDR4
//! * SSD
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/encointer-node-notee
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_encointer_ceremonies
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=runtime/src/weights/pallet_encointer_ceremonies.rs
// --template=/Users/pigu/Dropbox/DATA/Documents/solidbit/kunden/encointer/code/repos/encointer-node/scripts/frame-weight-template-full-info.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_encointer_ceremonies.
pub trait WeightInfo {
	fn register_participant() -> Weight;
	fn attest_claims() -> Weight;
	fn attest_attendees() -> Weight;
	fn endorse_newcomer() -> Weight;
	fn claim_rewards() -> Weight;
	fn set_inactivity_timeout() -> Weight;
	fn set_meetup_time_offset() -> Weight;
	fn set_reputation_lifetime() -> Weight;
	fn set_endorsement_tickets_per_bootstrapper() -> Weight;
	fn set_time_tolerance() -> Weight;
	fn set_location_tolerance() -> Weight;
	fn purge_community_ceremony() -> Weight;
}

/// Weights for pallet_encointer_ceremonies using the Encointer solo chain node and recommended hardware.
pub struct EncointerWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for EncointerWeight<T> {
	fn register_participant() -> Weight {
		(493_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn attest_claims() -> Weight {
		(3_141_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(27 as Weight))
			.saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
	fn attest_attendees() -> Weight {
		(617_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(26 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn endorse_newcomer() -> Weight {
		(445_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn claim_rewards() -> Weight {
		(1_787_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(62 as Weight))
			.saturating_add(T::DbWeight::get().writes(22 as Weight))
	}
	fn set_inactivity_timeout() -> Weight {
		(72_000_000 as Weight).saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_meetup_time_offset() -> Weight {
		(83_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_reputation_lifetime() -> Weight {
		(72_000_000 as Weight).saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_endorsement_tickets_per_bootstrapper() -> Weight {
		(78_000_000 as Weight).saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_time_tolerance() -> Weight {
		(76_000_000 as Weight).saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_location_tolerance() -> Weight {
		(73_000_000 as Weight).saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn purge_community_ceremony() -> Weight {
		(374_000_000 as Weight).saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
}

// For tests
impl WeightInfo for () {
	fn register_participant() -> Weight {
		(493_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn attest_claims() -> Weight {
		(3_141_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(27 as Weight))
			.saturating_add(RocksDbWeight::get().writes(12 as Weight))
	}
	fn attest_attendees() -> Weight {
		(617_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(26 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn endorse_newcomer() -> Weight {
		(445_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn claim_rewards() -> Weight {
		(1_787_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(62 as Weight))
			.saturating_add(RocksDbWeight::get().writes(22 as Weight))
	}
	fn set_inactivity_timeout() -> Weight {
		(72_000_000 as Weight).saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_meetup_time_offset() -> Weight {
		(83_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_reputation_lifetime() -> Weight {
		(72_000_000 as Weight).saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_endorsement_tickets_per_bootstrapper() -> Weight {
		(78_000_000 as Weight).saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_time_tolerance() -> Weight {
		(76_000_000 as Weight).saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_location_tolerance() -> Weight {
		(73_000_000 as Weight).saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn purge_community_ceremony() -> Weight {
		(374_000_000 as Weight).saturating_add(RocksDbWeight::get().writes(12 as Weight))
	}
}
