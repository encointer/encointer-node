name: build and test notee client and node

on:
  workflow_dispatch:
  push:
    branches: [ master, sgx-master ]
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [ master, sgx-master ]
#  schedule:
#    - cron:  '42 3 * * *'
env:
  CARGO_TERM_COLOR: always
  IPFS_ADD_URL: "https://ipfs.infura.io:5001/api/v0/add"
  IPFS_API_KEY: ${{ secrets.IPFS_API_KEY }}
  ENCOINTER_CLIENT: "../target/release/encointer-client-notee"
jobs:
  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-20.04
    steps:
      - uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
    - name: Setup Rust toolchain
      run: rustup show

    - name: Cache Rust Dependecies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          enclave/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: cargo build --release
    - name: Upload node
      uses: actions/upload-artifact@v2
      with:
        name: encointer-node-notee-${{ github.sha }}
        path: target/release/encointer-node-notee
    - name: Upload CLI client
      uses: actions/upload-artifact@v2
      with:
        name: encointer-client-notee-${{ github.sha }}
        path: target/release/encointer-client-notee
    - name: Upload runtime
      uses: actions/upload-artifact@v2
      with:
        name: encointer-node-notee-runtime-${{ github.sha }}
        path: |
          target/release/wbuild/encointer-node-notee-runtime/encointer_node_notee_runtime.compact.compressed.wasm
          target/release/wbuild/encointer-node-notee-runtime/encointer_node_notee_runtime.compact.wasm

  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
    - name: Setup Rust toolchain
      run: rustup show

    - name: Cache Rust Dependecies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          enclave/target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: cargo test
      run: cargo test --all

  check:
    name: Rust check ${{ matrix.check }} (${{ matrix.rust-target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        rust: [ stable ]
        rust-target: [ x86_64-unknown-linux-gnu ]
        check: [ fmt --all -- --check, clippy -p encointer-client-notee ]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
    steps:
      - uses: actions/checkout@v2

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.rust-target }}-${{ matrix.check }}

      - name: ${{ matrix.check }}
        run: cargo ${{ matrix.check }}

  test-bootstrapping:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@master

    - name: download build artifacts
      uses: actions/download-artifact@master
      with:
        name: encointer-node-notee-${{ github.sha }}

    - name: download build artifacts
      uses: actions/download-artifact@master
      with:
        name: encointer-client-notee-${{ github.sha }}

    - name: fix permissions of artifacts and move to original folder
      run: |
        chmod +x encointer-node-notee
        chmod +x encointer-client-notee
        mkdir -p target/release
        mv encointer-*-notee target/release

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: install py dependencies
      run: ./scripts/install_python_deps.sh

    - name: Set up ipfs
      uses: ibnesayeed/setup-ipfs@master
      with:
        run_daemon: true

    - name: start dev node
      run:
        ./target/release/encointer-node-notee --tmp --dev --enable-offchain-indexing true --rpc-methods unsafe &

    - name: bootstrap community
      run: |
        cd client
        python bootstrap_demo_community.py

  test-community-growing:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@master

    - name: download build artifacts
      uses: actions/download-artifact@master
      with:
        name: encointer-node-notee-${{ github.sha }}

    - name: download build artifacts
      uses: actions/download-artifact@master
      with:
        name: encointer-client-notee-${{ github.sha }}

    - name: fix permissions of artifacts and move to original folder
      run: |
        chmod +x encointer-node-notee
        chmod +x encointer-client-notee
        mkdir -p target/release
        mv encointer-*-notee target/release

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: install py dependencies
      run: ./scripts/install_python_deps.sh

    - name: Set up ipfs
      uses: ibnesayeed/setup-ipfs@master
      with:
        run_daemon: true

    - name: start dev node
      run: ./target/release/encointer-node-notee --tmp --dev --enable-offchain-indexing true --rpc-methods unsafe &

    - name: start faucet service
      run: |
        cd client
        python faucet.py &

    - name: start phase accelerator service
      run: |
        cd client
        python phase.py --idle-blocks 3 &

    - name: grow community for 2 entire ceremony cycles
      run: |
        cd client
        python bot-community.py init
        python bot-community.py test
        diff bot-stats.csv bot-stats-golden.csv

  test-bazaar:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@master

      - name: download build artifacts
        uses: actions/download-artifact@master
        with:
          name: encointer-node-notee-${{ github.sha }}

      - name: download build artifacts
        uses: actions/download-artifact@master
        with:
          name: encointer-client-notee-${{ github.sha }}

      - name: fix permissions of artifacts and move to original folder
        run: |
          chmod +x encointer-node-notee
          chmod +x encointer-client-notee
          mkdir -p target/release
          mv encointer-*-notee target/release

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: install py dependencies
        run: ./scripts/install_python_deps.sh

      - name: Set up ipfs
        uses: ibnesayeed/setup-ipfs@master
        with:
          run_daemon: true

      - name: start dev node
        run: ./target/release/encointer-node-notee --tmp --dev --enable-offchain-indexing true --rpc-methods unsafe &
      - name: start faucet service
        run: |
          cd client
          python faucet.py &

      # note: this test can currently not fail. Need to update the register-business for that
      - name: register businesses
        run: |
          cd client
          python bot-community.py init
          python register-businesses.py

  release:
    name: Draft Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build, unit-tests, check, test-bootstrapping, test-community-growing, test-bazaar]
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2

      - name: Download Encointer Node
        uses: actions/download-artifact@v2
        with:
          name: encointer-node-notee-${{ github.sha }}

      - name: Download Encointer Client
        uses: actions/download-artifact@v2
        with:
          name: encointer-client-notee-${{ github.sha }}

      - name: Create required package.json
        run: test -f package.json || echo '{}' >package.json

      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: .

      - name: Release
        id: create-release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: true
          files: |
            encointer-node-notee
            encointer-client-notee

  publish-runtimes:
    name: Publish Runtimes
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        runtime: ["encointer-node-notee"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - name: Set up Ruby 2.7
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7

      - name: Get runtime version
        id: get-runtime-ver
        run: |
          ls
          ls "${{ matrix.runtime }}-runtime-${{ github.sha }}"
          runtime_ver="$(ruby -e 'require "./scripts/github/lib.rb"; puts get_runtime()')"
          echo "::set-output name=runtime_ver::$runtime_ver"
      - name: Upload compact ${{ matrix.runtime }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.asset_upload_url }}
          asset_path: "${{ matrix.runtime }}-runtime-${{ github.sha }}/encointer_node_notee_runtime.compact.wasm"
          asset_name: encointer_node_notee_runtime-v${{ steps.get-runtime-ver.outputs.runtime_ver }}.compact.wasm
          asset_content_type: application/wasm

      - name: Upload compressed ${{ matrix.runtime }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.asset_upload_url }}
          asset_path: "${{ matrix.runtime }}-runtime-${{ github.sha }}/encointer_node_notee_runtime.compact.compressed.wasm"
          asset_name: encointer_node_notee_runtime-v${{ steps.get-runtime-ver.outputs.runtime_ver }}.compact.compressed.wasm
          asset_content_type: application/wasm

